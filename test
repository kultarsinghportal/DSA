public class PipelineSharingService {
    public static void shareRecordWithUsers(Id recordId, List<String> userNames) {
        List<User> validUsers = [SELECT Id, Name FROM User WHERE Name IN :userNames];
        Set<Id> validUserIds = new Set<Id>();
        for (User user : validUsers) {
            validUserIds.add(user.Id);
        }

        List<Pipeline__Share> shares = new List<Pipeline__Share>();

        for (Id userId : validUserIds) {
            Pipeline__Share share = new Pipeline__Share();
            share.ParentId = recordId;
            share.UserOrGroupId = userId;
            share.AccessLevel = 'Read';
            share.RowCause = Schema.Pipeline__Share.RowCause.Manual;
            shares.add(share);
        }

        if (!shares.isEmpty()) {
            Database.SaveResult[] results = Database.insert(shares, false);
            for (Database.SaveResult sr : results) {
                if (!sr.isSuccess()) {
                    System.debug('Error: ' + sr.getErrors()[0].getMessage());
                }
            }
        }
    }
}

trigger PipelineTrigger on Pipeline__c (after insert, after update) {
    for (Pipeline__c pipelineRecord : Trigger.new) {
        if (pipelineRecord.Users__c != null) {
            List<String> userNames = pipelineRecord.Users__c.split(';');
            PipelineSharingService.shareRecordWithUsers(pipelineRecord.Id, userNames);
        }
    }
}


trigger OpportunityTrigger on Opportunity (before insert, before update) {
    Set<Id> userIds = new Set<Id>();
    Set<Id> recordTypeIds = new Set<Id>();
    Set<Id> accountIds = new Set<Id>();
    Set<Id> dealIds = new Set<Id>();

    for (Opportunity opp : Trigger.new) {
        userIds.add(opp.CreatedById);
        userIds.add(opp.OwnerId);
        userIds.add(opp.LastModifiedById);
        recordTypeIds.add(opp.RecordTypeId);
        accountIds.add(opp.AccountId);
        dealIds.add(opp.Deal__c);
    }

    Map<Id, User> users = new Map<Id, User>([SELECT Id, Name FROM User WHERE Id IN :userIds]);
    Map<Id, RecordType> recordTypes = new Map<Id, RecordType>([SELECT Id, Name FROM RecordType WHERE Id IN :recordTypeIds]);
    Map<Id, Account> accounts = new Map<Id, Account>([SELECT Id, Name FROM Account WHERE Id IN :accountIds]);
    Map<Id, CustomObject__c> deals = new Map<Id, CustomObject__c>([SELECT Id, Name FROM CustomObject__c WHERE Id IN :dealIds]);

    for (Opportunity opp : Trigger.new) {
        if (opp.CreatedById != null && users.containsKey(opp.CreatedById)) {
            opp.Created_By_Name__c = users.get(opp.CreatedById).Name;
        }
        if (opp.OwnerId != null && users.containsKey(opp.OwnerId)) {
            opp.Owner_Name__c = users.get(opp.OwnerId).Name;
        }
        if (opp.LastModifiedById != null && users.containsKey(opp.LastModifiedById)) {
            opp.Last_Modified_By_Name__c = users.get(opp.LastModifiedById).Name;
        }
        if (opp.RecordTypeId != null && recordTypes.containsKey(opp.RecordTypeId)) {
            opp.Record_Type_Name__c = recordTypes.get(opp.RecordTypeId).Name;
        }
        if (opp.AccountId != null && accounts.containsKey(opp.AccountId)) {
            opp.Account_Name__c = accounts.get(opp.AccountId).Name;
        }
        if (opp.Deal__c != null && deals.containsKey(opp.Deal__c)) {
            opp.Deal_Name__c = deals.get(opp.Deal__c).Name;
        }
    }
}
