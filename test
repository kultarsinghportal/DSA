using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

public class SalesforceApi
{
    private readonly SalesforceAuth _salesforceAuth;

    public SalesforceApi(SalesforceAuth salesforceAuth)
    {
        _salesforceAuth = salesforceAuth;
    }

    public async Task<string> GetAllOpportunitiesAsync()
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            // SOQL query to select opportunities. Modify the query to fit your needs.
            string soqlQuery = "SELECT Id, Name, CloseDate, StageName, Amount FROM Opportunity";
            string requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/query/?q={Uri.EscapeDataString(soqlQuery)}";

            var response = await httpClient.GetAsync(requestUrl);

            if (response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                return responseContent; // Contains JSON string of all opportunities
            }
            else
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to retrieve opportunities: {responseContent}");
            }
        }
    }

public async Task<string> CreateOpportunityAsync(string opportunityName, DateTime closeDate, string stageName, double amount)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var opportunityData = new
            {
                Name = opportunityName,
                CloseDate = closeDate.ToString("yyyy-MM-dd"),
                StageName = stageName,
                Amount = amount
            };

            var jsonContent = JsonConvert.SerializeObject(opportunityData);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync($"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/", content);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to create opportunity: {responseContent}");
            }
            else
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                return responseContent; // Typically contains the ID of the newly created opportunity
            }
        }
    }

 public async Task DeleteOpportunityAsync(string opportunityId)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/{opportunityId}";

            var response = await httpClient.DeleteAsync(requestUrl);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to delete opportunity: {responseContent}");
            }
            else
            {
                Console.WriteLine($"Opportunity with ID {opportunityId} was successfully deleted.");
            }
        }

public async Task UpdateOpportunityAsync(string opportunityId, string newName, DateTime newCloseDate, double newAmount)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var opportunityData = new
            {
                Name = newName,
                CloseDate = newCloseDate.ToString("yyyy-MM-dd"),
                Amount = newAmount
            };

            var jsonContent = JsonConvert.SerializeObject(opportunityData);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/{opportunityId}";

            // Salesforce API requires using PATCH method for updates, but HttpClient does not have a PatchAsync method directly.
            // So, we use SendAsync method with the PATCH method explicitly set.
            var request = new HttpRequestMessage(new HttpMethod("PATCH"), requestUrl) { Content = content };

            var response = await httpClient.SendAsync(request);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to update opportunity: {responseContent}");
            }
            else
            {
                Console.WriteLine($"Opportunity with ID {opportunityId} was successfully updated.");
            }
        }
    }

public async Task UpsertOpportunityAsync(string externalIdValue, string opportunityName, DateTime closeDate, double amount)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var opportunityData = new
            {
                Name = opportunityName,
                CloseDate = closeDate.ToString("yyyy-MM-dd"),
                StageName = "Prospecting", // Example stage name, adjust as needed
                Amount = amount
            };

            var jsonContent = JsonConvert.SerializeObject(opportunityData);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/External_ID__c/{externalIdValue}";

            // Salesforce REST API uses PATCH method for the upsert operation
            var request = new HttpRequestMessage(new HttpMethod("PATCH"), requestUrl) { Content = content };

            var response = await httpClient.SendAsync(request);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to upsert opportunity: {responseContent}");
            }
            else
            {
                // Success, you can parse the response content if needed or simply acknowledge success
                Console.WriteLine("Opportunity upserted successfully.");
            }
        }

public async Task<string> DescribeOpportunityAsync()
    {
        using (var httpClient = new HttpClient())
        {
            // Set the authorization header with the access token
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);

            // Construct the request URL for the describe endpoint
            var requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/describe";

            // Make the GET request to the describe endpoint
            var response = await httpClient.GetAsync(requestUrl);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to describe Opportunity: {responseContent}");
            }
            
            // Read and return the response content
            return await response.Content.ReadAsStringAsync();
        }
    }

//
 public async Task<string> GetRecentOpportunitiesAsync()
    {
        using (var httpClient = new HttpClient())
        {
            // Set the authorization header with the access token
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);

            // Construct the request URL for the recent opportunities endpoint
            var requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/recent/";

            // Make the GET request to the recent endpoint
            var response = await httpClient.GetAsync(requestUrl);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to get recent Opportunities: {responseContent}");
            }

            // Read and return the response content
            return await response.Content.ReadAsStringAsync();
        }
    }
//

public async Task<string> SearchOpportunitiesAsync(string searchString)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);

            // URL encode the search string and construct the SOSL query
            string encodedSearchString = HttpUtility.UrlEncode($"FIND {{{searchString}}} IN ALL FIELDS RETURNING Opportunity(Name, CloseDate, StageName, Amount)");
            var requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/search/?q={encodedSearchString}";

            // Make the GET request to the search endpoint
            var response = await httpClient.GetAsync(requestUrl);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to search Opportunities: {responseContent}");
            }

            // Read and return the response content
            return await response.Content.ReadAsStringAsync();
        }
    }
    }
// Streaming
PushTopic pushTopic = new PushTopic();
pushTopic.Name = 'OpportunityUpdates';
pushTopic.Query = 'SELECT Id, Name, StageName, Amount FROM Opportunity WHERE IsClosed = false';
pushTopic.ApiVersion = 52.0;
pushTopic.NotifyForOperationUpdate = true;
pushTopic.NotifyForFields = 'Referenced';
insert pushTopic;

 string salesforceInstance = "https://login.salesforce.com";
            string accessToken = "Your_Access_Token_Here";
            string apiVersion = "52.0";  // Replace with your Salesforce API version
            string topic = "/topic/YourTopicName";

            var client = new BayeuxClient($"{salesforceInstance}/cometd/{apiVersion}/",
                new LongPollingTransport(new Dictionary<string, object>(), new HttpClientTransport()));

            client.AddExtension(new CometDExtension(accessToken));

            client.Handshake();
            client.WaitFor(10000, new[] { BayeuxClient.State.CONNECTED });

            client.GetChannel(topic).Subscribe((s, e) => {
                Console.WriteLine("Received: " + e.Data);
            });

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();

            client.Disconnect();

 private class CometDExtension : IExtension
        {
            private readonly string _accessToken;
            public CometDExtension(string accessToken)
            {
                _accessToken = accessToken;
            }

            public bool Receive(IMutableMessage message)
            {
                return true;
            }

            public bool Send(IMutableMessage message)
            {
                message.AddHeader("Authorization", "Bearer " + _accessToken);
                return true;
            }
        }

// Initialize the HTTP client used by CometD for long polling
            var httpClient = new System.Net.Http.HttpClient();
            
            // Setup the CometD client
            var options = new Dictionary<string, object>();
            var transport = new LongPollingTransport(options, httpClient);
            var client = new BayeuxClient($"{salesforceInstance}/cometd/{apiVersion}/", new List<ClientTransport> { transport });

            client.AddExtension(new AuthorizationExtension(accessToken));

            client.Handshake();
            client.WaitFor(10000, new[] { BayeuxClient.State.CONNECTED });

            client.GetChannel("/topic/YourTopicName").Subscribe((s, e) => {
                Console.WriteLine("Received: " + e.Data);
            });

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();

            client.Disconnect();
        }

        class AuthorizationExtension : IExtension
        {
            private string _accessToken;

            public AuthorizationExtension(string accessToken)
            {
                _accessToken = accessToken;
            }

            public bool Receive(IMutableMessage message)
            {
                return true;
            }

            public bool Send(IMutableMessage message)
            {
                message.AddHeader("Authorization", "Bearer " + _accessToken);
                return true;
            }
        }
}



 string salesforceInstance = "https://yourInstance.salesforce.com";
            string accessToken = "Your_Access_Token_Here";
            string apiVersion = "52.0";  // Adjust API version as needed

            // Setup the CometD client with default transport
            var client = new BayeuxClient($"{salesforceInstance}/cometd/{apiVersion}/", new List<ClientTransport> { new LongPollingTransport() });

            client.AddExtension(new AuthorizationExtension(accessToken));

            client.Handshake();
            client.WaitFor(10000, new[] { BayeuxClient.State.CONNECTED });

            client.GetChannel("/topic/YourTopicName").Subscribe((s, e) => {
                Console.WriteLine("Received: " + e.Data);
            });

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();

            client.Disconnect();
        }

        class AuthorizationExtension : IExtension
        {
            private string _accessToken;

            public AuthorizationExtension(string accessToken)
            {
                _accessToken = accessToken;
            }

            public bool Receive(IMutableMessage message)
            {
                return true;
            }

            public bool Send(IMutableMessage message)
            {
                message.AddHeader("Authorization", "Bearer " + _accessToken);
                return true;
            }
        }
