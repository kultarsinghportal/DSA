public class PipelineSharingHandler {
    public static void shareWithUsers(List<Pipeline__c> pipelineRecords) {
        List<Pipeline__Share> sharesToInsert = new List<Pipeline__Share>();
        List<Pipeline__Share> sharesToDelete = new List<Pipeline__Share>();

        for (Pipeline__c pipeline : pipelineRecords) {
            if (pipeline.Allowed_User_Ids__c != null) {
                // First, remove existing sharing rules for this record
                sharesToDelete.addAll([
                    SELECT Id 
                    FROM Pipeline__Share 
                    WHERE ParentId = :pipeline.Id AND RowCause = Schema.Pipeline__Share.RowCause.Manual
                ]);

                // Split the comma-separated user IDs
                List<String> userIds = pipeline.Allowed_User_Ids__c.split(',');

                for (String userId : userIds) {
                    // Create a sharing rule for each user
                    Pipeline__Share share = new Pipeline__Share();
                    share.ParentId = pipeline.Id;
                    share.UserOrGroupId = userId.trim();
                    share.AccessLevel = 'Read';
                    share.RowCause = Schema.Pipeline__Share.RowCause.Manual;
                    sharesToInsert.add(share);
                }
            }
        }

        // Delete old sharing rules
        if (!sharesToDelete.isEmpty()) {
            try {
                delete sharesToDelete;
            } catch (DmlException e) {
                System.debug('An error occurred while deleting shares: ' + e.getMessage());
            }
        }

        // Insert new sharing rules
        if (!sharesToInsert.isEmpty()) {
            try {
                insert sharesToInsert;
            } catch (DmlException e) {
                System.debug('An error occurred while inserting shares: ' + e.getMessage());
            }
        }
    }
}


trigger PipelineTrigger on Pipeline__c (after insert, after update) {
    if (Trigger.isAfter) {
        if (Trigger.isInsert || Trigger.isUpdate) {
            // Call the static method in the handler class with the list of new or updated records
            PipelineSharingHandler.shareWithUsers(Trigger.new);
        }
    }
}


trigger TaskTrigger on Task (after insert, after update, after delete) {
    List<Task_Update__e> events = new List<Task_Update__e>();

    // Handle insert and update operations
    if (Trigger.isInsert || Trigger.isUpdate) {
        for (Task t : Trigger.new) {
            // Check if the Task is related to your specific custom object
            if (t.WhatId != null && t.WhatId.getSObjectType() == MyCustomObject__c.SObjectType) {
                Task_Update__e event = new Task_Update__e();
                event.TaskId__c = t.Id;
                event.RecordTypeId__c = t.RecordTypeId;
                event.WhatId__c = t.WhatId;
                event.Subject__c = t.Subject;
                event.ActivityDate__c = t.ActivityDate;
                event.Status__c = t.Status;
                event.Priority__c = t.Priority;
                event.IsHighPriority__c = t.IsHighPriority;
                event.OwnerId__c = t.OwnerId;
                event.Description__c = t.Description;
                event.Type__c = t.Type;
                event.IsDeleted__c = t.IsDeleted;
                event.IsClosed__c = t.IsClosed;
                event.CreatedDate__c = t.CreatedDate;
                event.CreatedById__c = t.CreatedById;
                event.LastModifiedDate__c = t.LastModifiedDate;
                event.LastModifiedById__c = t.LastModifiedById;
                event.SystemModstamp__c = t.SystemModstamp;
                event.IsArchived__c = t.IsArchived;
                event.ReminderDateTime__c = t.ReminderDateTime;
                event.IsReminderSet__c = t.IsReminderSet;
                event.RecurrenceActivityId__c = t.RecurrenceActivityId;
                event.IsRecurrence__c = t.IsRecurrence;
                event.RecurrenceStartDateOnly__c = t.RecurrenceStartDateOnly;
                event.RecurrenceEndDateOnly__c = t.RecurrenceEndDateOnly;
                event.RecurrenceTimeZoneSidKey__c = t.RecurrenceTimeZoneSidKey;
                event.RecurrenceType__c = t.RecurrenceType;
                event.RecurrenceInterval__c = t.RecurrenceInterval;
                event.RecurrenceDayOfMonth__c = t.RecurrenceDayOfMonth;
                event.TaskSubtype__c = t.TaskSubtype;
                event.CompletedDateTime__c = t.CompletedDateTime;
                event.TaskRef__c = t.TaskRef__c;
                event.Task_Description__c = t.Task_Description__c;
                event.Logged_By__c = t.Logged_By__c;
                events.add(event);
            }
        }
    }

    // Handle delete operations
    if (Trigger.isDelete) {
        for (Task t : Trigger.old) {
            // Check if the Task was related to your specific custom object
            if (t.WhatId != null && t.WhatId.getSObjectType() == MyCustomObject__c.SObjectType) {
                Task_Update__e event = new Task_Update__e();
                event.TaskId__c = t.Id;
                event.RecordTypeId__c = t.RecordTypeId;
                event.WhatId__c = t.WhatId;
                event.Subject__c = t.Subject;
                event.ActivityDate__c = t.ActivityDate;
                event.Status__c = t.Status;
                event.Priority__c = t.Priority;
                event.IsHighPriority__c = t.IsHighPriority;
                event.OwnerId__c = t.OwnerId;
                event.Description__c = t.Description;
                event.Type__c = t.Type;
                event.IsDeleted__c = true; // Mark as deleted
                event.IsClosed__c = t.IsClosed;
                event.CreatedDate__c = t.CreatedDate;
                event.CreatedById__c = t.CreatedById;
                event.LastModifiedDate__c = t.LastModifiedDate;
                event.LastModifiedById__c = t.LastModifiedById;
                event.SystemModstamp__c = t.SystemModstamp;
                event.IsArchived__c = t.IsArchived;
                event.ReminderDateTime__c = t.ReminderDateTime;
                event.IsReminderSet__c = t.IsReminderSet;
                event.RecurrenceActivityId__c = t.RecurrenceActivityId;
                event.IsRecurrence__c = t.IsRecurrence;
                event.RecurrenceStartDateOnly__c = t.RecurrenceStartDateOnly;
                event.RecurrenceEndDateOnly__c = t.RecurrenceEndDateOnly;
                event.RecurrenceTimeZoneSidKey__c = t.RecurrenceTimeZoneSidKey;
                event.RecurrenceType__c = t.RecurrenceType;
                event.RecurrenceInterval__c = t.RecurrenceInterval;
                event.RecurrenceDayOfMonth__c = t.RecurrenceDayOfMonth;
                event.TaskSubtype__c = t.TaskSubtype;
                event.CompletedDateTime__c = t.CompletedDateTime;
                event.TaskRef__c = t.TaskRef__c;
                event.Task_Description__c = t.Task_Description__c;
                event.Logged_By__c = t.Logged_By__c;
                events.add(event);
            }
        }
    }

    // Publish all events
    if (!events.isEmpty()) {
        EventBus.publish(events);
    }
}
