using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

public class SalesforceApi
{
    private readonly SalesforceAuth _salesforceAuth;

    public SalesforceApi(SalesforceAuth salesforceAuth)
    {
        _salesforceAuth = salesforceAuth;
    }

    public async Task<string> GetAllOpportunitiesAsync()
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            // SOQL query to select opportunities. Modify the query to fit your needs.
            string soqlQuery = "SELECT Id, Name, CloseDate, StageName, Amount FROM Opportunity";
            string requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/query/?q={Uri.EscapeDataString(soqlQuery)}";

            var response = await httpClient.GetAsync(requestUrl);

            if (response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                return responseContent; // Contains JSON string of all opportunities
            }
            else
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to retrieve opportunities: {responseContent}");
            }
        }
    }

public async Task<string> CreateOpportunityAsync(string opportunityName, DateTime closeDate, string stageName, double amount)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var opportunityData = new
            {
                Name = opportunityName,
                CloseDate = closeDate.ToString("yyyy-MM-dd"),
                StageName = stageName,
                Amount = amount
            };

            var jsonContent = JsonConvert.SerializeObject(opportunityData);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync($"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/", content);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to create opportunity: {responseContent}");
            }
            else
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                return responseContent; // Typically contains the ID of the newly created opportunity
            }
        }
    }

 public async Task DeleteOpportunityAsync(string opportunityId)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _salesforceAuth.AccessToken);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            var requestUrl = $"{_salesforceAuth.InstanceUrl}/services/data/vXX.0/sobjects/Opportunity/{opportunityId}";

            var response = await httpClient.DeleteAsync(requestUrl);

            if (!response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"Failed to delete opportunity: {responseContent}");
            }
            else
            {
                Console.WriteLine($"Opportunity with ID {opportunityId} was successfully deleted.");
            }
        }
}
