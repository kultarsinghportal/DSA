 services.AddSingleton(provider =>
        {
            var options = provider.GetRequiredService<IOptions<SalesforceConfiguration>>();
            var transport = provider.GetRequiredService<LongPollingTransport>();
            var tokenResponse = provider.GetRequiredService<AsyncExpiringLazy<AccessTokenResponse>>();
            var resilientStreamingClient = provider.GetRequiredService<ResilientStreamingClient>();

            async Task InitializeAndUpdateClient()
            {
                var accessToken = await tokenResponse.Value();
                var serverUri = new Uri(accessToken.InstanceUrl);
                var endpoint = $"{serverUri.Scheme}://{serverUri.Host}{options.Value.CometDUri}";

                var bayeuxClient = new BayeuxClient(endpoint, new[] { transport });

                // Use reflection to set the private _bayeuxClient field
                var field = typeof(ResilientStreamingClient).GetField("_bayeuxClient", BindingFlags.NonPublic | BindingFlags.Instance);
                field.SetValue(resilientStreamingClient, bayeuxClient);
            }

            InitializeAndUpdateClient().GetAwaiter().GetResult();

            return resilientStreamingClient;
        });
