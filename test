public class PipelineSharingService {
    public static void shareRecordWithUsers(Id recordId, List<String> userNames) {
        List<User> validUsers = [SELECT Id, Name FROM User WHERE Name IN :userNames];
        Set<Id> validUserIds = new Set<Id>();
        for (User user : validUsers) {
            validUserIds.add(user.Id);
        }

        List<Pipeline__Share> shares = new List<Pipeline__Share>();

        for (Id userId : validUserIds) {
            Pipeline__Share share = new Pipeline__Share();
            share.ParentId = recordId;
            share.UserOrGroupId = userId;
            share.AccessLevel = 'Read';
            share.RowCause = Schema.Pipeline__Share.RowCause.Manual;
            shares.add(share);
        }

        if (!shares.isEmpty()) {
            Database.SaveResult[] results = Database.insert(shares, false);
            for (Database.SaveResult sr : results) {
                if (!sr.isSuccess()) {
                    System.debug('Error: ' + sr.getErrors()[0].getMessage());
                }
            }
        }
    }
}

trigger PipelineTrigger on Pipeline__c (after insert, after update) {
    for (Pipeline__c pipelineRecord : Trigger.new) {
        if (pipelineRecord.Users__c != null) {
            List<String> userNames = pipelineRecord.Users__c.split(';');
            PipelineSharingService.shareRecordWithUsers(pipelineRecord.Id, userNames);
        }
    }
}
