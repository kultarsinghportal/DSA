public class OpportunityService(SalesforceWrapper wrapper)
{
    private readonly SalesforceWrapper _wrapper = wrapper;

    public Task<IEnumerable<Opportunity>> GetOpportunitiesAsync()
    {
        string query = "SELECT Id, Name, StageName, CloseDate FROM Opportunity";
        return _wrapper.QueryAsync<Opportunity>(query);
    }

    public Task<string> CreateOpportunityAsync(Opportunity opportunity)
    {
        return _wrapper.CreateAsync(opportunity, "Opportunity");
    }

    public Task<bool> UpdateOpportunityAsync(string id, Opportunity opportunity)
    {
        return _wrapper.UpdateAsync(id, opportunity, "Opportunity");
    }

    public Task<bool> DeleteOpportunityAsync(string id)
    {
        return _wrapper.DeleteAsync(id, "Opportunity");
    }
}


using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Threading.Tasks;

[Route("opportunities")]
public class OpportunitiesController(OpportunityService opportunityService, ILogger<OpportunitiesController> logger)
{
    private readonly OpportunityService _opportunityService = opportunityService;
    private readonly ILogger<OpportunitiesController> _logger = logger;

    [HttpGet("")]
    public async Task<IActionResult> Index()
    {
        var opportunities = await _opportunityService.GetOpportunitiesAsync();
        
        foreach (var opportunity in opportunities)
        {
            _logger.LogInformation($"Opportunity: {opportunity.Name}, Stage: {opportunity.StageName}, Close Date: {opportunity.CloseDate}");
        }

        return Content("Opportunities have been logged.");
    }

    [HttpPost("create")]
    public async Task<IActionResult> Create(Opportunity opportunity)
    {
        var id = await _opportunityService.CreateOpportunityAsync(opportunity);
        _logger.LogInformation($"Created Opportunity: {id}");

        return Content($"Opportunity created with ID: {id}");
    }

    [HttpPut("update/{id}")]
    public async Task<IActionResult> Update(string id, Opportunity opportunity)
    {
        var success = await _opportunityService.UpdateOpportunityAsync(id, opportunity);
        if (success)
        {
            _logger.LogInformation($"Updated Opportunity: {id}");
        }

        return Content($"Opportunity updated with ID: {id}");
    }

    [HttpDelete("delete/{id}")]
    public async Task<IActionResult> Delete(string id)
    {
        var success = await _opportunityService.DeleteOpportunityAsync(id);
        if (success)
        {
            _logger.LogInformation($"Deleted Opportunity: {id}");
        }

        return Content($"Opportunity deleted with ID: {id}");
    }
}
